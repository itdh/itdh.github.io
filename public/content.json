{"meta":{"title":"@DH Blog","subtitle":"","description":"","author":"Ding Huang","url":"http://example.com","root":"/"},"pages":[{"title":"Tags","date":"2023-06-01T08:03:47.000Z","updated":"2023-06-02T03:34:47.490Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"文章分类","date":"2023-06-01T08:03:47.000Z","updated":"2023-06-01T08:15:20.923Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"使用 IDEA 构建 Spring5.3.10 源码","slug":"使用-IDEA-构建-Spring5-3-10-源码","date":"2023-06-02T02:56:32.000Z","updated":"2023-06-02T06:43:23.409Z","comments":true,"path":"posts/983a1c52.html","link":"","permalink":"http://example.com/posts/983a1c52.html","excerpt":"","text":"此教程是基于周瑜老师的 Spring5.3.10 注释版源码编译的，并不是 Github 原生的 Spring5.3.10 源码，有一些差别，但都是 gradle 配置文件的微小改动，比如把某些依赖从 optional 改成 compile 级别、修改了 gradle 仓库的地址（主要是为了方便编译），其他都没改动。 一、版本 Spring 版本：5.3.10 Gradle 版本：6.8 IDEA 版本：2022.2 二、下载Spring源码所需要的依赖因为Spring源码存在很多依赖包，如果自行下载，会需要下很久，所以此处将我自己电脑上已下载的依赖给出： 链接：https://caiyun.139.com/m/i?005CiN4dFp6mN 提取码：TbOy 三、下载 Spring 源码git clone 的地址为：https://gitee.com/dhpro/spring-framework-5.3.10.git 建议直接用 IDEA 的 git 来下载源码： 输入地址，点击 Clone，就会开始下载源码工程（因为是从 gitee 上下载，所以会比从 github 上下载快很多)。 一旦下载完成，IDEA 就会自动下载 gradle，下载完 gradle 就会开始下载 Spring 源码依赖，但是我们已经有现成的了，所以可以直接取消这个过程。 四、修改IDEA的gradle配置 首先把 gradle user home 改为 .gradle压缩包 的解压之后的文件路径， 然后把 Build and run using 和 Run tests using 都改为 IntelliJ IDEA， 改完之后点击 Apply，再点击 OK，会自动触发 gradle 的重新编译。 五、运行代码编译成功后，在左侧可以看到如下模块，其中有一个 tuling 模块，这是一个可以直接运行的模块，在它下面有一个 Test 类，直接运行 main 方法。 5.1 运行过程中可能出现的问题5.1.1 问题一我在运行的时候出现了以下错误： 由于报错的是 core 模块，所以在 gradle 中找到 core 模块，先执行 clean，然后 build，执行完毕后重新运行程序，问题解决。","categories":[{"name":"Java","slug":"Java","permalink":"http://example.com/categories/Java/"},{"name":"框架","slug":"Java/框架","permalink":"http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"},{"name":"Spring","slug":"Java/框架/Spring","permalink":"http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/Spring/"},{"name":"Spring-5.3.10","slug":"Java/框架/Spring/Spring-5-3-10","permalink":"http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/Spring/Spring-5-3-10/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://example.com/tags/Java/"},{"name":"Spring","slug":"Spring","permalink":"http://example.com/tags/Spring/"}]},{"title":"Arthas","slug":"Arthas","date":"2023-06-01T07:35:46.000Z","updated":"2023-06-02T06:43:40.215Z","comments":true,"path":"posts/e1a71cf6.html","link":"","permalink":"http://example.com/posts/e1a71cf6.html","excerpt":"","text":"一、简介1.1 什么是 ArthasArthas 是一款线上监控诊断产品，通过全局视角实时查看应用 load、内存、gc、线程的状态信息，并能在不修改应用代码的情况下，对业务问题进行诊断，包括查看方法调用的出入参、异常，监测方法执行耗时，类加载信息等，大大提升线上问题排查效率。 1.2 下载 Arthas下载地址：https://arthas.aliyun.com/download/latest_version?mirror=aliyun 1.3 启动方式将下载的文件解压后，可以看到有 as.sh和 arthas-boot.jar，有两种启动方式 直接执行 ./as.sh启动 执行 java -jar arthas-boot.jar启动 需要注意的是：使用和目标进程一致的用户启动，否则可能 attach 失败 执行该程序的用户需要和目标进程具有相同的权限。比如以 admin用户来执行：sudo su admin &amp;&amp; java -jar arthas-boot.jar或 sudo -u admin -EH java -jar arthas-boot.jar。 如果 attach 不上目标进程，可以查看~/logs/arthas/目录下的日志。 执行成功后会显示 Java 进程信息，输入对应的数字序号后回车，Arthas 会 attach 到目标进程上，并输出日志。 二、命令列表及其使用2.1 JVM 相关2.1.1 dashboard - 当前系统的实时数据面板2.1.1.1 作用显示当前系统的实时数据面板，按 ctrl+c退出。 2.1.1.2 参数说明 参数名称 参数说明 [i:] 刷新实时数据的时间间隔 (ms)，默认 5000ms [n:] 刷新实时数据的次数 实例：dashboard -i 1000 -n 2 ：每1000ms刷新一次，刷新两次。 2.1.1.3 数据说明 ID: Java 级别的线程 ID，注意这个 ID 不能跟 jstack 中的 nativeID 一一对应。 NAME: 线程名 GROUP: 线程组名 PRIORITY: 线程优先级, 1~10 之间的数字，越大表示优先级越高 STATE: 线程的状态 CPU%: 线程的 cpu 使用率。比如采样间隔 1000ms，某个线程的增量 cpu 时间为 100ms，则 cpu 使用率&#x3D;100&#x2F;1000&#x3D;10% DELTA_TIME: 上次采样之后线程运行增量 CPU 时间，数据格式为秒 TIME: 线程运行总 CPU 时间，数据格式为分:秒 INTERRUPTED: 线程当前的中断位状态 DAEMON: 是否是 daemon 线程 从上图中可以看到有些线程的 ID、PRIORITY 为-1，且没有状态等属性，这是因为这些线程是 JVM 内部线程。 2.1.1.4 JVM 内部线程Java 8 之后支持获取 JVM 内部线程 CPU 时间，这些线程只有名称和 CPU 时间，没有 ID 及状态等信息（显示 ID 为-1）。 通过内部线程可以观测到 JVM 活动，如 GC、JIT 编译等占用 CPU 情况，方便了解 JVM 整体运行状况。 当 JVM 堆(heap)&#x2F;元数据(metaspace)空间不足或 OOM 时，可以看到 GC 线程的 CPU 占用率明显高于其他的线程。 当执行 trace/watch/tt/redefine等命令后，可以看到 JIT 线程活动变得更频繁。因为 JVM 热更新 class 字节码时清除了此 class 相关的 JIT 编译结果，需要重新编译。 JVM 内部线程包括下面几种： JIT 编译线程: 如 C2 CompilerThread0, C1 CompilerThread2 GC 线程: 如 GC Thread0, G1 Young RemSet Sampling 其它内部线程: 如 VM Periodic Task Thread, VM Thread, Service Thread 2.1.2 ognl - 执行 ognl 表达式2.1.2.1 作用执行 ognl 表达式 2.1.2.2 参数说明 参数名称 参数说明 express 执行的表达式 [c:] 执行表达式的 ClassLoader 的 hashcode，默认值是 SystemClassLoader [classLoaderClass:] 指定执行表达式的 ClassLoader 的 class name [x] 结果对象的展开层次，默认值 1 2.1.2.3 ognl 表达式说明2.1.2.3.1 语法基本的 OGNL 表达式非常简单。该语言的特性已经变得非常丰富，但是您通常不需要担心该语言中更复杂的部分：简单的情况仍然如此。例如，要获取对象的 name 属性，OGNL 表达式就是 name。要获取由 headline 属性返回的对象的 text 属性，OGNL 表达式是 headline.text。 OGNL 表达式的基本单元是导航链，通常简称为“链”。最简单的链条由以下部分组成： 表达式元素部分 例子 属性名称 比如上面示例中的 name和 headline.text。 方法调用 hashCode()返回当前对象的哈希码 数组索引 listeners[0]返回当前对象 listeners 列表中的第一个 所有 OGNL 表达式都在当前对象的上下文中求值，而链只是使用链中前一个链接的结果作为下一个链接的当前对象。你想把链条拉长多长都行。例如，这条链： 1name.toCharArray()[0].numericValue.toString() 这个表达式按照以下步骤进行计算： 提取初始或根对象（用户通过 OGNL 上下文提供给 OGNL ）的 name 属性； 在结果字符串上调用 toCharArray() 方法； 从结果数组中提取第一个字符（索引为0的字符）； 从该字符获取 numericValue 属性(字符表示为 Character对象，Character类有一个名为 getNumericValue() 的方法)。 在结果 Integer 对象上调用 toString()。这个表达式的最终结果是最后一次 toString() 调用返回的 String。 请注意，这个示例只能用于从对象获取值，而不能用于设置值。将上述表达式传递给 Ognl.setValue() 方法将导致InappropriateExpressionException被抛出，因为链中的最后一个链接既不是属性名也不是数组索引。 2.1.2.3.2 表达式本节概述了 OGNL 表达式元素的细节。 常量 OGNL 有以下几种常量： String 字面值，如 Java 中由单引号或双引号分隔，并带有完整的转义集； Character 字面量，也与 Java 一样：由单引号分隔，也带有全套转义； 数字字面值，比 Java 多一些类型。除了 Java 的整型、长型、浮点数和双精度外，OGNL 还允许您指定带有“b”或“b”后缀的 BigDecimals，以及带有“h”或“h”后缀的 BigIntegers(想想“huge”——我们选择了“h”表示)； Boolean：true 或者 false； null 引用属性 OGNL 在处理属性引用时以不同的方式对待不同类型的对象。映射将所有属性引用视为元素查找或存储，并将属性名称作为键。列表和数组类似地处理数字属性，以属性名作为索引，但处理字符串属性的方式与普通对象相同。普通对象（即所有其他类型的对象）只能通过使用“get”和“set”方法（或“is”和“set”）处理字符串属性，如果对象有这些方法，或者使用给定名称的字段处理字符串属性。 注意这里的新术语。属性“名称”可以是任何类型，而不仅仅是字符串。但是要引用非字符串属性，必须使用我们一直称为“索引”的符号。例如，要获取一个数组的长度，你可以使用这个表达式： 1array.length 但是要获取数组的元素0，你必须使用这样的表达式： 1array[0] 索引 如上所述，“索引”表示法实际上只是属性引用，尽管是一种计算形式的属性引用，而不是常数形式。例如，OGNL在内部处理 array.length表达式与这个表达式完全相同： 1array[&quot;length&quot;] 这个表达式会有相同的结果（尽管内部形式不同）： 1array[&quot;len&quot; + &quot;gth&quot;] 2.1.3 getstatic - 查看类的静态属性2.1.4 heapdump - dump java heap, 类似 jmap 命令的 heap dump 功能2.1.5 jvm - 查看当前 JVM 的信息2.1.6 logger - 查看和修改 logger2.1.7 mbean - 查看 Mbean 的信息2.1.8 memory - 查看 JVM 的内存信息2.1.9 perfcounter - 查看当前 JVM 的 Perf Counter 信息2.1.10 sysenv - 查看 JVM 的环境变量2.1.11 sysprop - 查看和修改 JVM 的系统属性2.1.12 thread - 查看当前 JVM 的线程堆栈信息2.1.13 vmoption - 查看和修改 JVM 里诊断相关的 option2.1.14 vmtool - 从 jvm 里查询对象","categories":[{"name":"Java","slug":"Java","permalink":"http://example.com/categories/Java/"},{"name":"调试工具","slug":"Java/调试工具","permalink":"http://example.com/categories/Java/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"Arthas","slug":"Arthas","permalink":"http://example.com/tags/Arthas/"}]}],"categories":[{"name":"Java","slug":"Java","permalink":"http://example.com/categories/Java/"},{"name":"框架","slug":"Java/框架","permalink":"http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/"},{"name":"Spring","slug":"Java/框架/Spring","permalink":"http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/Spring/"},{"name":"Spring-5.3.10","slug":"Java/框架/Spring/Spring-5-3-10","permalink":"http://example.com/categories/Java/%E6%A1%86%E6%9E%B6/Spring/Spring-5-3-10/"},{"name":"调试工具","slug":"Java/调试工具","permalink":"http://example.com/categories/Java/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://example.com/tags/Java/"},{"name":"Spring","slug":"Spring","permalink":"http://example.com/tags/Spring/"},{"name":"Arthas","slug":"Arthas","permalink":"http://example.com/tags/Arthas/"}]}